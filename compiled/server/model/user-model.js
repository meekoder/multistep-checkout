const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const shippingSchema = new Schema({
        street1: { type: String },
        street2: { type: String },
        city: { type: String },
        state: { type: String },
        zipcode: { type: String }
});

const billingSchema = new Schema({
        cardNumber: { type: String, required: true },
        expirationDate: { type: String, required: true },
        cvv: { type: String, required: true },
        zipcode: { type: String, required: true }
});

const userSchema = new Schema({
        name: { type: String, required: true },
        email: { type: String, required: true },
        password: { type: String, required: true },
        shipping: [shippingSchema],
        billing: [billingSchema]
});

const User = mongoose.model('users', userSchema);
const Shipping = mongoose.model('shipping', shippingSchema);
const Billing = mongoose.model('billing', billingSchema);

module.exports = {
        User,
        Shipping,
        Billing
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9tb2RlbC91c2VyLW1vZGVsLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIlNjaGVtYSIsInNoaXBwaW5nU2NoZW1hIiwic3RyZWV0MSIsInR5cGUiLCJTdHJpbmciLCJzdHJlZXQyIiwiY2l0eSIsInN0YXRlIiwiemlwY29kZSIsImJpbGxpbmdTY2hlbWEiLCJjYXJkTnVtYmVyIiwicmVxdWlyZWQiLCJleHBpcmF0aW9uRGF0ZSIsImN2diIsInVzZXJTY2hlbWEiLCJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsInNoaXBwaW5nIiwiYmlsbGluZyIsIlVzZXIiLCJtb2RlbCIsIlNoaXBwaW5nIiwiQmlsbGluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFdBQVdDLFFBQVEsVUFBUixDQUFqQjtBQUNBLE1BQU1DLFNBQVNGLFNBQVNFLE1BQXhCOztBQUVBLE1BQU1DLGlCQUFpQixJQUFJRCxNQUFKLENBQ2Y7QUFDUUUsaUJBQVMsRUFBQ0MsTUFBTUMsTUFBUCxFQURqQjtBQUVRQyxpQkFBUyxFQUFDRixNQUFNQyxNQUFQLEVBRmpCO0FBR1FFLGNBQU0sRUFBQ0gsTUFBTUMsTUFBUCxFQUhkO0FBSVFHLGVBQU8sRUFBQ0osTUFBTUMsTUFBUCxFQUpmO0FBS1FJLGlCQUFTLEVBQUNMLE1BQU1DLE1BQVA7QUFMakIsQ0FEZSxDQUF2Qjs7QUFVQSxNQUFNSyxnQkFBZ0IsSUFBSVQsTUFBSixDQUNkO0FBQ1FVLG9CQUFZLEVBQUNQLE1BQU1DLE1BQVAsRUFBZU8sVUFBVSxJQUF6QixFQURwQjtBQUVRQyx3QkFBZ0IsRUFBQ1QsTUFBTUMsTUFBUCxFQUFlTyxVQUFVLElBQXpCLEVBRnhCO0FBR1FFLGFBQUssRUFBQ1YsTUFBTUMsTUFBUCxFQUFlTyxVQUFVLElBQXpCLEVBSGI7QUFJUUgsaUJBQVMsRUFBQ0wsTUFBTUMsTUFBUCxFQUFlTyxVQUFVLElBQXpCO0FBSmpCLENBRGMsQ0FBdEI7O0FBU0EsTUFBTUcsYUFBYSxJQUFJZCxNQUFKLENBQ1g7QUFDUWUsY0FBTSxFQUFDWixNQUFNQyxNQUFQLEVBQWVPLFVBQVUsSUFBekIsRUFEZDtBQUVRSyxlQUFPLEVBQUNiLE1BQU1DLE1BQVAsRUFBZU8sVUFBVSxJQUF6QixFQUZmO0FBR1FNLGtCQUFVLEVBQUNkLE1BQU1DLE1BQVAsRUFBZU8sVUFBVSxJQUF6QixFQUhsQjtBQUlRTyxrQkFBVSxDQUFDakIsY0FBRCxDQUpsQjtBQUtRa0IsaUJBQVMsQ0FBQ1YsYUFBRDtBQUxqQixDQURXLENBQW5COztBQVVBLE1BQU1XLE9BQU90QixTQUFTdUIsS0FBVCxDQUFlLE9BQWYsRUFBd0JQLFVBQXhCLENBQWI7QUFDQSxNQUFNUSxXQUFXeEIsU0FBU3VCLEtBQVQsQ0FBZSxVQUFmLEVBQTJCcEIsY0FBM0IsQ0FBakI7QUFDQSxNQUFNc0IsVUFBVXpCLFNBQVN1QixLQUFULENBQWUsU0FBZixFQUEwQlosYUFBMUIsQ0FBaEI7O0FBRUFlLE9BQU9DLE9BQVAsR0FBaUI7QUFDVEwsWUFEUztBQUVURSxnQkFGUztBQUdUQztBQUhTLENBQWpCIiwiZmlsZSI6InVzZXItbW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XG5cbmNvbnN0IHNoaXBwaW5nU2NoZW1hID0gbmV3IFNjaGVtYShcbiAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmVldDE6IHt0eXBlOiBTdHJpbmd9LFxuICAgICAgICAgICAgICAgIHN0cmVldDI6IHt0eXBlOiBTdHJpbmcgfSxcbiAgICAgICAgICAgICAgICBjaXR5OiB7dHlwZTogU3RyaW5nfSxcbiAgICAgICAgICAgICAgICBzdGF0ZToge3R5cGU6IFN0cmluZ30sXG4gICAgICAgICAgICAgICAgemlwY29kZToge3R5cGU6IFN0cmluZ30sXG4gICAgICAgIH1cbilcblxuY29uc3QgYmlsbGluZ1NjaGVtYSA9IG5ldyBTY2hlbWEoXG4gICAgICAgIHtcbiAgICAgICAgICAgICAgICBjYXJkTnVtYmVyOiB7dHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGU6IHt0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlfSxcbiAgICAgICAgICAgICAgICBjdnY6IHt0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlfSxcbiAgICAgICAgICAgICAgICB6aXBjb2RlOiB7dHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZX1cbiAgICAgICAgfVxuKVxuXG5jb25zdCB1c2VyU2NoZW1hID0gbmV3IFNjaGVtYShcbiAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IHt0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlfSxcbiAgICAgICAgICAgICAgICBlbWFpbDoge3R5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWV9LFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB7dHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgc2hpcHBpbmc6IFtzaGlwcGluZ1NjaGVtYV0sXG4gICAgICAgICAgICAgICAgYmlsbGluZzogW2JpbGxpbmdTY2hlbWFdXG4gICAgICAgIH1cbilcblxuY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKCd1c2VycycsIHVzZXJTY2hlbWEpO1xuY29uc3QgU2hpcHBpbmcgPSBtb25nb29zZS5tb2RlbCgnc2hpcHBpbmcnLCBzaGlwcGluZ1NjaGVtYSk7XG5jb25zdCBCaWxsaW5nID0gbW9uZ29vc2UubW9kZWwoJ2JpbGxpbmcnLCBiaWxsaW5nU2NoZW1hKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIFVzZXIsXG4gICAgICAgIFNoaXBwaW5nLFxuICAgICAgICBCaWxsaW5nXG59O1xuIl19