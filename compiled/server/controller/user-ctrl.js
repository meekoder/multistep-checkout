const { User } = require('../model/user-model');
const { Shipping } = require('../model/user-model');
const { Billing } = require('../model/user-model');

createAccount = (req, res) => {
  const body = req.body;
  if (!body) {
    return res.status(400).json({
      success: false,
      error: 'Please fill out all fields'
    });
  }

  const user = new User(body);
  if (!user) {
    return res.status(400).json({
      success: false,
      error: err
    });
  }

  user.save().then(() => {
    return res.status(201).json({
      success: true,
      id: user._id,
      message: 'User created successfully!'
    });
  }).catch(error => {
    return res.status(400).json({
      error,
      message: 'Failed to create user!'
    });
  });
};

addShipping = (req, res) => {
  const body = req.body;

  if (!body) {
    return res.status(400).json({
      success: false,
      error: 'Please fill out all fields'
    });
  }

  const shipping = new Shipping(body);
  if (!shipping) {
    return res.status(400).json({
      success: false, error: err
    });
  }

  shipping.save().then(() => {
    return res.status(201).json({
      success: true,
      id: shipping._id,
      message: 'Shipping information added successfully!'
    });
  }).catch(error => {
    return res.status(400).json({
      error,
      message: 'Failed to add shipping information!'
    });
  });
};

addBilling = (req, res) => {
  const body = req.body;

  if (!body) {
    return res.status(400).json({
      success: false,
      error: 'Please fill out all fields'
    });
  }

  const user = new Billing(body);
  if (!user) {
    return res.status(400).json({
      success: false, error: err
    });
  }

  user.save().then(() => {
    return res.status(201).json({
      success: true,
      id: user._id,
      message: 'Billing information added successfully!'
    });
  }).catch(error => {
    return res.status(400).json({
      error,
      message: 'Failed to add billing information!'
    });
  });
};

module.exports = {
  createAccount,
  addShipping,
  addBilling
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9jb250cm9sbGVyL3VzZXItY3RybC5qcyJdLCJuYW1lcyI6WyJVc2VyIiwicmVxdWlyZSIsIlNoaXBwaW5nIiwiQmlsbGluZyIsImNyZWF0ZUFjY291bnQiLCJyZXEiLCJyZXMiLCJib2R5Iiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJlcnJvciIsInVzZXIiLCJlcnIiLCJzYXZlIiwidGhlbiIsImlkIiwiX2lkIiwibWVzc2FnZSIsImNhdGNoIiwiYWRkU2hpcHBpbmciLCJzaGlwcGluZyIsImFkZEJpbGxpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUNBLElBQUQsS0FBU0MsUUFBUSxxQkFBUixDQUFmO0FBQ0EsTUFBTSxFQUFDQyxRQUFELEtBQWFELFFBQVEscUJBQVIsQ0FBbkI7QUFDQSxNQUFNLEVBQUNFLE9BQUQsS0FBWUYsUUFBUSxxQkFBUixDQUFsQjs7QUFFQUcsZ0JBQWdCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzVCLFFBQU1DLE9BQU9GLElBQUlFLElBQWpCO0FBQ0EsTUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVCxXQUFPRCxJQUFJRSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJDLGVBQVMsS0FEaUI7QUFFMUJDLGFBQU87QUFGbUIsS0FBckIsQ0FBUDtBQUlEOztBQUVELFFBQU1DLE9BQU8sSUFBSVosSUFBSixDQUFTTyxJQUFULENBQWI7QUFDQSxNQUFJLENBQUNLLElBQUwsRUFBVztBQUNULFdBQU9OLElBQUlFLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsZUFBUyxLQURpQjtBQUUxQkMsYUFBT0U7QUFGbUIsS0FBckIsQ0FBUDtBQUlEOztBQUVERCxPQUNHRSxJQURILEdBRUdDLElBRkgsQ0FFUSxNQUFNO0FBQ1YsV0FBT1QsSUFBSUUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyxlQUFTLElBRGlCO0FBRTFCTSxVQUFJSixLQUFLSyxHQUZpQjtBQUcxQkMsZUFBUztBQUhpQixLQUFyQixDQUFQO0FBS0QsR0FSSCxFQVNHQyxLQVRILENBU1NSLFNBQVM7QUFDZCxXQUFPTCxJQUFJRSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJFLFdBRDBCO0FBRTFCTyxlQUFTO0FBRmlCLEtBQXJCLENBQVA7QUFJRCxHQWRIO0FBZUQsQ0FoQ0Q7O0FBa0NBRSxjQUFjLENBQUNmLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzFCLFFBQU1DLE9BQU9GLElBQUlFLElBQWpCOztBQUVBLE1BQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1QsV0FBT0QsSUFBSUUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyxlQUFTLEtBRGlCO0FBRTFCQyxhQUFPO0FBRm1CLEtBQXJCLENBQVA7QUFJRDs7QUFFRCxRQUFNVSxXQUFXLElBQUluQixRQUFKLENBQWFLLElBQWIsQ0FBakI7QUFDQSxNQUFJLENBQUNjLFFBQUwsRUFBZTtBQUNiLFdBQU9mLElBQUlFLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsZUFBUyxLQURpQixFQUNWQyxPQUFPRTtBQURHLEtBQXJCLENBQVA7QUFHRDs7QUFFRFEsV0FDR1AsSUFESCxHQUVHQyxJQUZILENBRVEsTUFBTTtBQUNWLFdBQU9ULElBQUlFLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsZUFBUyxJQURpQjtBQUUxQk0sVUFBSUssU0FBU0osR0FGYTtBQUcxQkMsZUFBUztBQUhpQixLQUFyQixDQUFQO0FBS0QsR0FSSCxFQVNHQyxLQVRILENBU1NSLFNBQVM7QUFDZCxXQUFPTCxJQUFJRSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJFLFdBRDBCO0FBRTFCTyxlQUFTO0FBRmlCLEtBQXJCLENBQVA7QUFJRCxHQWRIO0FBZUQsQ0FoQ0Q7O0FBa0NBSSxhQUFhLENBQUNqQixHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN6QixRQUFNQyxPQUFPRixJQUFJRSxJQUFqQjs7QUFFQSxNQUFJLENBQUNBLElBQUwsRUFBVztBQUNULFdBQU9ELElBQUlFLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsZUFBUyxLQURpQjtBQUUxQkMsYUFBTztBQUZtQixLQUFyQixDQUFQO0FBSUQ7O0FBRUQsUUFBTUMsT0FBTyxJQUFJVCxPQUFKLENBQVlJLElBQVosQ0FBYjtBQUNBLE1BQUksQ0FBQ0ssSUFBTCxFQUFXO0FBQ1QsV0FBT04sSUFBSUUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyxlQUFTLEtBRGlCLEVBQ1ZDLE9BQU9FO0FBREcsS0FBckIsQ0FBUDtBQUdEOztBQUVERCxPQUNHRSxJQURILEdBRUdDLElBRkgsQ0FFUSxNQUFNO0FBQ1YsV0FBT1QsSUFBSUUsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyxlQUFTLElBRGlCO0FBRTFCTSxVQUFJSixLQUFLSyxHQUZpQjtBQUcxQkMsZUFBUztBQUhpQixLQUFyQixDQUFQO0FBS0QsR0FSSCxFQVNHQyxLQVRILENBU1NSLFNBQVM7QUFDZCxXQUFPTCxJQUFJRSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJFLFdBRDBCO0FBRTFCTyxlQUFTO0FBRmlCLEtBQXJCLENBQVA7QUFJRCxHQWRIO0FBZUQsQ0FoQ0Q7O0FBa0NBSyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZwQixlQURlO0FBRWZnQixhQUZlO0FBR2ZFO0FBSGUsQ0FBakIiLCJmaWxlIjoidXNlci1jdHJsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1VzZXJ9ID0gcmVxdWlyZSgnLi4vbW9kZWwvdXNlci1tb2RlbCcpO1xuY29uc3Qge1NoaXBwaW5nfSA9IHJlcXVpcmUoJy4uL21vZGVsL3VzZXItbW9kZWwnKTtcbmNvbnN0IHtCaWxsaW5nfSA9IHJlcXVpcmUoJy4uL21vZGVsL3VzZXItbW9kZWwnKTtcblxuY3JlYXRlQWNjb3VudCA9IChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBib2R5ID0gcmVxLmJvZHk7XG4gIGlmICghYm9keSkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiAnUGxlYXNlIGZpbGwgb3V0IGFsbCBmaWVsZHMnXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCB1c2VyID0gbmV3IFVzZXIoYm9keSk7XG4gIGlmICghdXNlcikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICBlcnJvcjogZXJyXG4gICAgfSk7XG4gIH1cblxuICB1c2VyXG4gICAgLnNhdmUoKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGlkOiB1c2VyLl9pZCxcbiAgICAgICAgbWVzc2FnZTogJ1VzZXIgY3JlYXRlZCBzdWNjZXNzZnVsbHkhJ1xuICAgICAgfSlcbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcixcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjcmVhdGUgdXNlciEnXG4gICAgICB9KVxuICAgIH0pO1xufVxuXG5hZGRTaGlwcGluZyA9IChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBib2R5ID0gcmVxLmJvZHk7XG5cbiAgaWYgKCFib2R5KSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdQbGVhc2UgZmlsbCBvdXQgYWxsIGZpZWxkcydcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHNoaXBwaW5nID0gbmV3IFNoaXBwaW5nKGJvZHkpO1xuICBpZiAoIXNoaXBwaW5nKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyXG4gICAgfSlcbiAgfVxuXG4gIHNoaXBwaW5nXG4gICAgLnNhdmUoKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGlkOiBzaGlwcGluZy5faWQsXG4gICAgICAgIG1lc3NhZ2U6ICdTaGlwcGluZyBpbmZvcm1hdGlvbiBhZGRlZCBzdWNjZXNzZnVsbHkhJ1xuICAgICAgfSlcbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcixcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBhZGQgc2hpcHBpbmcgaW5mb3JtYXRpb24hJ1xuICAgICAgfSlcbiAgICB9KTtcbn1cblxuYWRkQmlsbGluZyA9IChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBib2R5ID0gcmVxLmJvZHk7XG5cbiAgaWYgKCFib2R5KSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdQbGVhc2UgZmlsbCBvdXQgYWxsIGZpZWxkcydcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHVzZXIgPSBuZXcgQmlsbGluZyhib2R5KTtcbiAgaWYgKCF1c2VyKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyXG4gICAgfSlcbiAgfVxuXG4gIHVzZXJcbiAgICAuc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgaWQ6IHVzZXIuX2lkLFxuICAgICAgICBtZXNzYWdlOiAnQmlsbGluZyBpbmZvcm1hdGlvbiBhZGRlZCBzdWNjZXNzZnVsbHkhJ1xuICAgICAgfSlcbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcixcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBhZGQgYmlsbGluZyBpbmZvcm1hdGlvbiEnXG4gICAgICB9KVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlQWNjb3VudCxcbiAgYWRkU2hpcHBpbmcsXG4gIGFkZEJpbGxpbmdcbn07XG4iXX0=